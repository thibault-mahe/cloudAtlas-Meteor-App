{"name":"CloudAtlas : une application pour tester Meteor.JS (tutoriel Fr)","tagline":"A simple app experiment for categorization using Meteor.JS ","body":"# TESTER METEOR SOUS MAC, LE FRAMEWORK DES APPLICATIONS DE DEMAIN\r\n\r\nMeteor est un framework Javascript assez récent permettant de développer des pages dynamiques et des applications en un rien de temps mais également en très peu de ligne de codes. Utilisant notamment Node.js, Meteor permet de développer son application uniquement en Javascript, côté client aussi bien, et c'est là la force du framework, que côté serveur. Une merveilleuse idée quand on constate le succès que connait aujourd'hui le langage, notamment simplifié et démocratisé par jQuery. Une merveilleuse idée surtout pour nous autres débutants qui apprécierons grandement de n'avoir qu'un seul langage de programmation à gérer, et à tenter de comprendre. \r\n\r\nMeteor gère par ailleurs pour nous la base de donnée nécessaire au développement du projet, en utilisant MongoDb, qu'il n'est pas utile de connaître, dans un premier temps. L'apprentissage de Meteor, et de son système de collections, nous en apprendra suffisamment sur son fonctionnement pour faire tourner notre première application.\r\n\r\nEnfin, notons sans trop entrer dans la complexité du framework que Meteor tient son succès à sa réactivité : toute modification d'une donnée sera automatiquement et en temps réel prise en compte par toutes les applications et tous les utilisateurs, y compris du côté des interfaces utilisateurs, sans avoir à actualiser sa page. C'est une caractéristique éminemment essentielle pour des applications de discussion par exemple, de partage de donnée, de plateforme de collaboration en temps réel ou encore de liste à actualiser. Mais pas seulement, le champ des possibles reste grand ouvert !\r\n\r\nDe nombreux exemples et tutoriaux sont d'ores-et-déjà disponibles sur Internet :\r\n* le site officiel de Meteor propose quelques exemples intéressants comme des tableaux de classement de résultats mise à jour en temps réel, des jeux ou encore une « liste des choses à faire » (todo list) s'actualisant aisément ;\r\n* Nettuts+ propose notamment un tutoriel pour monter une application de chat, ou encore un autre pour créer un « panier » pour un site d'e-commerce s'actualisant en temps réel ;\r\n* le site dédié discovermeteor.com propose plusieurs tutoriaux pour démarrer, notamment un reprenant la construction d'un petit forum, ainsi qu'un autre reprenant une partie du code de Telescope, un des premiers sites web entièrement développés sous Meteor ;\r\n* w3resource propose quant à lui un tutoriel pour une application de partage de liens ;\r\n* Sacha Grief propose sur SmashingMag un tutoriel très complet pour une application de partage de contact Twitter prenant en compte une connexion via son compte Twitter ;\r\n* Andrew Scala propose également un tutoriel très détaillé pour comprendre les principales caractéristiques du framework ;\r\n* enfin, Github est rempli d'exemples d'applications pour tester Meteor.\r\n\r\nCe tour d'horizon non-exhaustif illustre l'abondance des articles de qualité accompagnant l'apprentissage de Meteor mais met également en relief l'absence de tutoriel pour les francophones non-anglophones – à l'exception peut-être de la très bonne traduction de l'article d'Andrew Scala par Etienne Balit. \r\nCet article se propose donc d'expliquer succinctement, et dans la langue de Zinedine Zidane, comment créer sa première application avec le framework Meteor. L'application proposée est par ailleurs très distincte de ce qui est déjà proposé. Le code complet est disponible ici. \r\n\r\n\r\nL'idée est de créer une application qui servirait à plusieurs usages différents. Pour monter en généralité, l'application prend le nom générique de cloudAtlas. Elle se divise en deux parties. Dans une partie il s'agit d'enregistrer un « cloud » selon deux champs (un titre et un sous-titre par exemple) et de le classer en renseignant un troisième champ de référence. Dans une autre partie, il s'agit de retrouver n'importe quel cloud enregistré selon ce troisième champ de référence. L'application permet ainsi de classer des objets selon divers prix par exemple, puis de retrouver pour chaque prix les objets enregistrés ; elle peut permettre également de classer les films actuellement à l'affiche selon un système de notation (par exemple, entre 1 et 5 étoiles), puis de retrouver pour chaque note les différents films correspondants ; elle permet encore de classer des interlocuteurs selon des spécialisations, et pour chaque spécialisation retrouver le ou les interlocuteurs de référence... Bref, les exemples sont nombreux d'utilisation de ce cloudAtlas. C'est parti !\r\n\r\n\r\n## INSTALLER METEOR ET CREER L'APPLICATION\r\n\r\nL'installation s'effectue à partie du Terminal, mais diffère selon le système d'exploitation.\r\nPour Mac, il suffira de taper cette ligne de code :\r\n\r\ncurl https://install.meteor.com | /bin/sh\r\n\r\nL'installation nécessitera sans doute votre mot de passe de session utilisateur, et parfois l'ajout de l'entête sudo avant la ligne de code.\r\n\r\nPour créer l'application, il suffit de rester dans le Terminal est de taper tout simplement :\r\n\r\nmeteor create MonApplication \r\net en l'occurrence ici :\r\nmeteor create cloudAtlas\r\n\r\n// Quelques commandes bonnes à connaître pour naviguer via la fenêtre de Terminal :\r\n_ls_ permet de faire la liste des dossiers et documents contenus dans le dossier dans lequel on se trouve\r\n_cd_ permet de changer d'emplacement (change directory) en renseignant juste après l'emplacement dans lequel on souhaite se rendre. Pour revenir dans l'emplacement contenant celui dans lequel on se trouve, il suffira de taper _cd .._ //\r\n\r\nAinsi, pour démarrer notre application, il nous suffit de nous y rendre tout d'abord :\r\n\r\ncd cloudAtlas\r\n\r\npuis de la lancer avec Meteor :\r\n\r\nmeteor \r\n\r\nUne fois l'application lancée, elle sera accessible à une adresse local depuis n'importe quel navigateur de votre poste : http://localhost:3000/ . On y trouvera par défaut une page « Hello World ! » vous souhaitant la bienvenue.\r\n\r\nLes différents fichiers de code se trouveront quant à eux dans le dossier portant le nom de votre application. Dans le fichier cloudAtlas, situé dans le dossier Utilisateurs, on retrouve ainsi avec 3 documents : cloudAtlas.js, cloudAtlas.html et cloudAtlas.css.\r\n\r\n\r\nCREER LA STRUCTURE DE MON APPLICATION\r\n\r\nPrécisons deux choses avant d'amorcer la structuration de notre application. Tout d'abord, nous avons déjà souligné que le développement d'une application avec Meteor se fait entièrement en Javascript (ce qui n'est pas entièrement vrai d'ailleurs puisque une application Meteor fonctionne comme un site Internet et nécessite donc une base de HTML et de CSS). C'est-à-dire que notre code Javascript sera, par défaut, à la fois exécuté du côté du navigateur et du côté serveur. Il sera don c nécessaire, bien souvent, de séparer ce qui doit être lu par l'un et ce qui doit être lu par l'autre. Pour séparer le code « client » du code « serveur », Meteor propose deux solutions :\r\n* ce que l'on appelle les « booleans » Meteor.isClient et Meteor.isServer, qui est la solution par défaut ;\r\n* une séparation des dossiers /client et /serveur.\r\n\r\nPuisque nous n'allons pas vraiment toucher au côté serveur, nous garderons ici la solution par défaut pour ne pas trop se compliquer. Le code complet disponible sur github vous montre cependant que la deuxième solution fonctionne évidemment très bien.\r\n\r\nUn boolean est comme une condition (d'où la présence du if d'ailleurs), qui renvoi un accord quand elle est remplie, ou un désaccord quand elle ne l'est pas. Ce que signifie donc Meteor.isClient c'est que ce qui suit (entre les premières accolades) ne doit être exécuté que du côté client (la condition), et évidemment  Meteor.isServer que du côté serveur. La structure du fichier .js ressemble donc pour l'instant à ceci :\r\n\r\nif (Meteor.isClient) {\r\n\r\n}\r\n\r\nif (Meteor.isServer) {\r\n  \r\n}\r\n\r\nLe code qui n'est présent dans aucune des deux conditions est exécuté des deux côtés. Pour notre part, nous ne mettrons principalement notre code que dans la première accolade, du côté client donc. Mais nous y reviendrons plus tard, car un deuxième point important est à noter.\r\n\r\nPour générer du contenu dynamiquement, Meteor utilise le système de template Handlebars qui permet de désigner les parties variables de notre code par des double accolades ouvrantes et fermantes {{   }} . Rien de très difficile ici, il suffira seulement de coder une page HTML toute simple en ajoutant ces marqueurs pour les parties dynamiques. Chaque variable étant définie par un template lui signifiant ce qu'elle doit afficher, il sera par ailleurs nécessaire de préciser dans le même code ces templates. Ainsi, notre page HTML comprendra trois parties : le head, le body, et les templates.\r\n\r\nNous souhaitons également que notre application se structure en trois parties :\r\n1.une partie où l'on enregistre nos items, nos « clouds » donc, via un formulaire nous permettant de renseigner les trois champs mentionnés plus haut ;\r\n2.une partie affichant tous les « clouds » enregistrés, quelque soit les champs, qui nous permettra par ailleurs de vérifier si le cloud que l'on enregistre est effectivement sauvegardé ;\r\n3.une partie dans laquelle il est possible de renseigner le troisième champ de référence et qui nous affichera en retour tous les « clouds » appartenant à ce champ. Puisque l'objectif de l'application est avant tout de trouver les « clouds » en fonction de champs spécifiques, il est préférable d'un point de vue interface que cette dernière partie apparaisse en première position sur la page.\r\n\r\nVoyons à quoi ressemble notre code HTML.\r\n\r\nTout d'abord, il est nécessaire de définir un titre dans les balises head, sans avoir à préciser cependant la mention du <!DOCTYPE> :\r\n<head>\r\n\t<title>cloudAtlas</title>\r\n</head>\r\n\r\nPuis dans le body, nous faisons apparaître les trois parties de notre application :\r\n\r\n<body>\r\n    <div id=\"app\">\r\n        <h1>CloudAtlas</h1>\r\n        <div id=\"cloud-search\">\r\n            {{> cloudSearch}}\r\n        </div>\r\n        <div id=\"cloud-form\">\r\n            {{> cloudForm}}\r\n        </div>\r\n        <div id=\"cloud-atlas\">\r\n            {{> cloudAtlas}}\r\n        </div>\r\n    </div>\r\n</body>\r\n\r\nLes trois parties sont intégrées dans une <div> englobante (« app ») qui facilitera la manipulation par la suite avec le CSS. L'application commence par un titre sobrement appelé « CloudAtlas ». Le code de chaque partie est à préciser : il s'agit tout simplement de trois <div> possédant chacune un id distinctif afin de pouvoir les manipuler plus facilement et désignant la position des parties. Chaque partie ne contient qu'une variable mise entre double accolades et désignant chacune le template à laquelle elle se réfère. Bien évidemment, chacun de ces 3 templates est à définir directement après la fermeture du body.\r\n\r\nL'ordre est indifférent. Suivons l'ordre logique du processus et commençons par celui du milieu, c'est-à-dire le formulaire de création de « clouds », dont le template est intitulé ci-dessus « cloudForm ». La balise pour définir un template est tout simplement la balise <template></template> et celle, plus connue, pour un formulaire est <form></form>. On obtient ainsi ceci :\r\n\r\n<template name=\"cloudForm\">\r\n     <form>\r\n        <p>REGISTER A CLOUD</p>\r\n        <input id=\"cloudTitle\" placeholder=\"Name\" required />\r\n        <input id=\"cloudSubTitle\" placeholder=\"First Name\"required />\r\n        <select id=\"cloudType\" required>\r\n                    <option value=\"0\">CHOOSE</option>\r\n                    <option value=\"field1\">field1</option>\r\n                    <option value=\"field2\">field2</option>\r\n                    <option value=\"field3\">field3</option>\r\n                    <option value=\"field4\">field4</option>\r\n                    <option value=\"field5\">field5</option>\r\n          </select>\r\n          <textarea rows=\"4\" cols=\"40\" id=\"cloudComment\" placeholder=\"Comment\" required></textarea>\r\n          <div class=\"submit\">\r\n            \t<input type=\"submit\" value=\"Add New Cloud\" />\r\n          </div>\r\n      </form>\r\n</template>\r\n\r\nOn retrouve dans ce template uniquement un formulaire HTML très simple, comprenant deux inputs (les deux champs de titre et de sous-titre qui qualifient le « cloud » que l'on enregistre), un bouton select pour classer le cloud dans un des champs de référence (les 5 fields ici), un textarea ajouter un commentaire, et enfin le bouton submit pour demande à l'application d'enregistrer tous ces renseignements. Nous verrons par la suite ce qui se passe derrière tout ca.\r\n\r\nDemandons désormais à l'application d'afficher tous les « clouds » que l'on enregistre. Bien sûr, ca ne fonctionnera pas encore puisque nous n'avons pas encore attaquer le Javascript. Cette partie correspond au template intitulé ci-dessus « cloudAtlas ». On cherche pour l'instant à simplement afficher dans une liste <ul> faite de <li> donc les différents « clouds ». Pour nous y retrouver sur l'interface utilisateur, il est utile ici d'ajouter un titre de section :\r\n\r\n<template name=\"cloudAtlas\">\r\n    <h2>//See All Clouds</h2>\r\n        <ul >\r\n    \t{{#each clouds}}\r\n\t     <li>\r\n  \t           {{this.cloudTitle}} {{this.cloudSubTitle}} : {{this.cloudType}}\r\n\t\t<br/>Comment : {{this.cloudComment}}\r\n                </li>\r\n         {{/each}}\r\n       </ul>\r\n</template>\r\n\r\nIci le code se corse un tout petit peu. Nous nous sommes notamment aidé d'un template helper, en l'occurrence ici le processus {{#each object}} … {{/each}} qui se propose d'appliquer ce qu'il contient pour chaque (each) « object » différent. Ainsi ici, à chaque « clouds » correspondra un <li> contenant le code inscrit. Jetons d'ailleurs un petit coup d'œil à ce code : il se propose de renvoyer successivement le titre et le sous-titre du cloud, puis, séparé par deux points, le champ de référence du cloud. Il va ensuite à la ligne pour présenter le commentaire éventuellement ajouté au cloud lors de son enregistrement. Ces informations seront ainsi données en liste pour chaque cloud enregistré.\r\nNotons ici que les 4 variables entre accolades (cloudTitle, cloudSubTitle, cloudType et cloudComment) correspondent aux 4 ids renseignés plus pour les sections correspondantes du formulaire. Cependant, ce n'est pas aux ids que les 4 variables font référence. Les 4 variables font en effet l'objet d'une définition qui leur est propre dans le code Javascript. C'est dans ce code qu'il faudra renseigner que ces variables se rapportent aux 4 champs correspondants du formulaire. Nous verrons ca très bientôt, attardons-nous avant pour finir sur le dernier template, intitulé « cloudSearch », et permettant la recherche des « clouds » en fonction d'un champ de référence.\r\n\r\nCe dernier template est paradoxalement plus simple et plus compliqué à la fois. En effet, plus simple car il ne fait finalement qu'un mixe entre les deux autres templates : il se compose ainsi d'un formulaire afin de recueillir le champ de recherche, et d'une liste qui affiche les résultats. Mais également plus compliqué car il demande plus d'abstraction dans la mesure où, tel quel, et contrairement aux autres templates, il ne fait pas exactement ce qu'on lui demande. En effet, difficile de demander au template de seulement afficher les résultats correspondant au champ renseigné dans le même template. Il nous faudra donc, par la suite, contourner la difficulté, en passant notamment par jQuery afin de travailler directement sur l'affichage des items de la liste. Gardons à l'esprit qu'il nous suffit pour l'instant de définir dans le template l'affichage d'une section pour renseigner le champ recherché et l'affichage des « clouds » :\r\n\r\n<template name=\"cloudSearch\">\r\n    <form>\r\n         <p>SEARCH FOR A CLOUD</p>\r\n         <select id=\"search-for-a-cloud\" required>\r\n                <option value=\"0\">CHOOSE</option>\r\n                <option value=\"field1\">field1</option>\r\n                <option value=\"field2\">field2</option>\r\n                <option value=\"field3\">field3</option>\r\n                <option value=\"field4\">field4</option>\r\n                <option value=\"field5\">field5</option>\r\n         </select>\r\n    </form>\r\n    <ul>\r\n        {{#each clouds}}\r\n\t     <li>\r\n            \t{{this.cloudTitle}} {{this.cloudSubTitle}}</span>\r\n\t\t<br/>Comment : {{this.cloudComment}}\r\n                 </li>\r\n        {{/each}}\r\n    </ul>\r\n</template>\r\n\r\nCe dernier template est ainsi sensiblement similaire aux deux autres : dans un premier temps un bouton select permet de sélectionner un des champs de référence, dans un second temps une liste affiche les résultats en présentant titre, sous-titre et commentaire (nul besoin du champ évidemment).\r\n\r\nLe fichier HTML est pour l'instant complet, voyons ce qui se cache derrière !\r\n\r\n\r\n## BEHIND THE SCENE \r\n\r\nDans le fichier cloudAtlas.js, nous travaillerons pour l'instant uniquement du côté du serveur, c'est à dire au sein de la structure : \r\n\r\nif (Meteor.isClient) {\r\n\r\n}\r\n\r\nL'unique ligne que nous ajoutons en dehors de cette structure est le nom de notre base de donnée qui recueillera tous nos clouds. Cette ligne est importante car elle crée pour notre application ce que Meteor appelle une collection. Tous nos « clouds » seront sauvegardés par Meteor (avec l'aide non négligeable des bases de données MongoDb) dans cette collection. C'est pourquoi il est important de la déclarer en premier (c'est avec elle que nous allons constamment interagir) et en dehors des conditions, afin que la collection soit définie à la fois côté client et côté serveur. Amorçons donc le fichier cloudAtlas.js par cette ligne :\r\n\r\nvar Atlas = new Meteor.Collection('clouds');\r\n\r\nElle signifie simplement que l'on crée une nouvelle collection qui s'intitule «Atlas» et qui est constituée de « clouds ».\r\n\r\nMeteor sait désormais que tout ce que l'on fait depuis le début, c'est simplement créer des items appelés « clouds ».\r\n\r\nDu côté du serveur, quand un cloud est créé, il est automatiquement ajouté à la collection Atlas, et est donc écrit dans une base de donnée mongo, et y reste tant qu'on ne lui a pas dit le contraire. Du côté client, la collection Atlas se connecte en temps réel au serveur et se met à jour automatiquement, créant comme une copie de la collection Atlas existante côté serveur. Le navigateur, en exécutant le code, sait alors quels clouds de cette collection il doit afficher.\r\n\r\nIl nous faut désormais préciser le comportement de chaque template dans le fichier Javascript. Tout comme le fichier HTML, le fichier Javascript est composé de 3 parties correspondantes aux trois templates. Reprenons-les un par un en suivant l'ordre logique que nous avons déjà pu suivre.\r\n\r\nLe formulaire d'enregistrement des « clouds » comprend un bouton « submit » qui se traduit en Javascript sous la forme d'un événement. Cet événement, l'appui sur le bouton submit, déclenche plusieurs comportements qui doivent permettre à Meteor d'enregistrer les champs renseignés dans le formulaire.\r\nMeteor possède sa propre grammaire dont il est évidemment très intéressant et utile de prendre connaissance, disponible sur sa documentation sur son site. Dans Meteor, un événement se code ainsi :\r\n\r\nTemplate.cloudForm.events = {\r\n\t'submit' : function (e, tmpl) {\r\n\t\te.preventDefault();\r\n\t}\t\r\n};\r\n\r\nLa première ligne signifie que le template dont le nom est « cloudForm » attend un événement qu'il définit à la deuxième ligne comme provenant d'un bouton 'submit'. L'appuie sur un tel bouton déclenche alors une fonction anonyme qui prend deux arguments (e, pour événement, et tmpl, pour template). La première action de cette fonction (troisième ligne) est d'empêcher le fonctionnement par défaut de bouton submit, afin qu'il déclenche ce qu'on lui demande de déclencher.\r\n\r\nCe qu'on lui demande de déclencher est justement à préciser juste après, c'est-à-dire avant les deux dernières accolades fermantes (l'avant dernière ferme la fonction déclenchée par le bouton submit, et la dernière l'instruction déclenchée par l'événement).\r\n\r\nEt que lui demande-t-on ? Pleins de choses ! Dans l'ordre :\r\n* d'abord on demande à l'application de créer un nouveau « cloud » en lui attribuant les renseignements apportés dans chacun des 4 champs ;\r\n* ensuite on lui demande d'insérer ce « cloud » dans notre collection, afin de ne pas le perdre et qu'il soit bien conservé avec les autres ;\r\n* on lui demande alors de vider les champs du formulaire pour laisser celui-ci aussi propre après utilisation qu'avant ;\r\n* enfin, parce que l'utilisateur ne voit pas toute la machinerie, on lui envoie un jolie message pour lui dire que le « cloud » est bien ajouté.\r\n\r\nAllé hop, codons tout ca !\r\n\r\nL'enregistrement des clouds est un peu plus complexe que le reste, mais rien d'insurmontable. L'idée est de récupérer chacun des champs renseignés dans le formulaire pour les attribuer à un objet qu'il faudra définir afin qu'il soit créer... Javascript nous propose ainsi très facilement de créer un objet qui aura toujours les mêmes propriétés. Il suffit d'abord de déclarer cet objet (pour le créer, un peu comme la parole divine), puis de préciser quelles sont ses propriétés, puis... c'est tout !\r\n\r\nvar newCloud = {\r\n\tcloudTitle: tmpl.find(\"#cloudTitle\").value,\r\n\tcloudSubTitle: tmpl.find(\"#cloudSubTitle\").value,\r\n\tcloudType: tmpl.find(\"#cloudType\").value,\r\n\tcloudComment: tmpl.find(\"#cloudComment\").value\r\n};\r\n\r\nNotre objet s'appelle donc « newCloud » et il comprend 4 propriétés : cloudTitle, cloudSubTitle, cloudType et cloudComment. C'est à ces 4 propriétés que font référence les variables entre accolades dans le fichier HTML. En effet, pour chaque « clouds », nous avons vu que la helper function demande d'afficher tour à tour chacune de ces propriétés. Il est donc nécessaire, comme nous avons pu le souligner, de préciser ici à quoi se rapportent ces propriétés. Ainsi, pour la propriété cloudTitle par exemple, Meteor demande au template tmpl en question (celui définit avec le bouton 'submit', donc il s'agit bien du template du formulaire) de trouver (find) la balise ayant l'id (#) « cloudTile » et d'en récupérer la valeur (.value) qui correspond en réalité à ce que l'utilisateur y a inscrit. Pour le cas du bouton select, la valeur n'est autre que ce que l'utilisateur a choisi. Cet objet Javascript nous permet donc bien d'enregistrer tous les champs enregistrés par l'utilisateur et de les lier dans un cloud.\r\n\r\nIl ne reste plus qu'à insérer celui-ci dans notre collection : \r\n\r\nAtlas.insert(newCloud);\r\n\r\nEt le tour est joué !\r\n\r\nPour ce qui suit il est particulièrement pratique d'utiliser jQuery qui simplifiera notre code. Pour cela, il suffit d'ajouter le package jQuery à Meteor depuis le Terminal avec la commande :\r\n\r\nmeteor add jquery\r\n\r\njQuery nous permet notamment d'aisément et rapidement effacer les valeurs des champs du formulaire. Prenons bien soin d'ajouter ces quelques lignes de jQuery après avoir enregistrer les valeurs renseignées !\r\n\r\n$('#cloudTitle').val('');\t\r\n$('#cloudSubTitle').val('');\t\r\n$('#cloudType').val('');\r\n$('#cloudComment').val('');\r\n\r\nCes lignes de codes remplacent simplement les valeurs des champs du formulaire par une chaîne de caractères vide.\r\n\r\nEnfin, il ne nous reste plus qu'à indiquer à l'utilisateur que son « cloud » a bien été enregistré. Faisons les choses bien en évitant de passer par les fenêtres d'alerte rudimentaires de Javascript. Écrivons plutôt directement dans le HTML un message que l'on cachera par défaut et que l'on affichera à la fin du processus de création du « cloud » afin de conclure celui-ci par une validation envoyée à l'utilisateur.\r\n\r\nDans le HTML, ajoutons ces lignes dans le body :\r\n\r\n<div class=\"added\">\r\n          Added !\r\n</div>\r\n\r\nPuis dans le Javascript, avant la fermeture de la fonction déclenchée par le submit :\r\n\r\n$('.added').fadeIn('slow', function() {}).delay(1000).fadeOut('slow', function() {});\r\n\t\r\nLe message s'affichera ainsi doucement puis s'effacera tout aussi doucement au bout d'une seconde.\r\n\r\nEt n'oublions pas enfin, au cas où ce n'est pas déjà fait, de bien fermer la fonction et le template :\r\n\r\n}\t\r\n};\r\n\r\nLe premier template est ainsi défini, ne reste plus qu'à s'attaquer aux deux autres, nettement plus rapide à définir !\r\n\r\nPour le template intitulé « cloudAtlas », il nous faut quelque chose de très simple : on veut seulement afficher toute notre collection :\r\n\r\nTemplate.cloudAtlas.clouds = Atlas.find({});\r\n\r\nIci encore la grammaire de Meteor est particulière mais très claire. Le template « cloudAtlas » applique aux « clouds » qu'il contient une fonction : trouver tous les « clouds » contenus dans la collection « Atlas » et les afficher (return) tous. Il n'en faudra pas plus !\r\n\r\nEnfin, la dernier template demandera une petite astuce supplémentaire. Comme nous le disions, nous demandons à ce template d'afficher également tous les « clouds », mais de masquer tous ceux dont le champ de référence ne nous intéresse pas. Plus précisément, nous ferons exactement l'inverse : par défaut tous les « clouds » seront cachés, et nous allons demander à l'application, grâce à jQuery, d'afficher uniquement ceux qui nous intéressent. Voyons ca de plus près.\r\n\r\nD'abord, demandons à Meteor de dire au template de nous renvoyer tous les « clouds » de la collection :\r\n\r\nTemplate.cloudSearch.clouds = Clouds.find({});\r\n\r\nPuis, dans le CSS, masquons les par défaut :\r\n\r\n.item {\r\n\tdisplay:none;\r\n}\r\n\r\nCela fonctionne évidemment uniquement si la classe « item » a bien  été attribué à chaque cloud du template « cloudSearch ». Modifions donc cette partie du template de façon à ajouter la classe :\r\n \r\n<ul>\r\n     {{#each clouds}}\r\n\t<li class=\"item\">\r\n\t     {{this.cloudTitle}} {{this.cloudSubTitle}}<br/>Comment : {{this.cloudComment}}\r\n\t</li>\r\n     {{/each}}\r\n</ul>\r\n\r\nIl nous reste désormais à filtrer l'affichage de ces « clouds » en fonction du champ que l'on cherche. C'est ici qu'apparaît une petite subtilité. Chaque cloud est enregistré selon un champ référent unique. Quand on souhaitera rechercher par exemple le champ « field1 », nous aimerions qu'apparaissent uniquement les « clouds » avec ce champ, évidemment. Il nous suffit de considérer ce champ de référence comme une classe à part entière, afin que jQuery puisse agir dessus : ainsi, quand un utilisateur sélectionne un champ « field1 », l'application lui affichera tous les clouds avec la classe « field1 ». Il nous faut alors préciser 3 détails :\r\n\r\n1) Dans le HTML, modifions l'affichage des clouds en ajoutant à chaque item la classe correspondant à son champ de référence, c'est à dire « cloudType » :\r\n\r\n<ul>\r\n    {{#each clouds}}\r\n\t<li class=\"item {{this.cloudType}}\">\r\n\t\t{{this.cloudTitle}} {{this.cloudSubTitle}}</span>\r\n\t\t<br/>Comment : {{this.cloudComment}}\r\n\t</li>\r\n    {{/each}}\r\n</ul>\r\n\r\n2) Dans le fichier Javascript, ajoutons les lignes de code jQuery nécessaires au comportement voulu. Celles-ci sont exécutées au moment où le DOM est chargé, ce qui se traduit dans Meteor par le démarrage du côté client :\r\n\r\nMeteor.startup(function() {\r\n    $(\"#search-for-a-cloud\").change(function(){\r\n\t$('.item').hide();\r\n\t$('.'+$(this).val()).show();\r\n    });\r\n});\r\n\r\nCes lignes précisent ainsi qu'au moment où une option du bouton select est choisie (c'est-à-dire au moment où un champ de recherche est sélectionné), jQuery récupère la valeur de ce bouton (correspondant, nous l'avons dit, au choix effectué par l'utilisateur, donc à la variable « cloudType » qui prend les valeurs field1, field2, field3, etc.) en lui ajoutant en entête un point lui permettant d'être considérée comme une classe. Cette classe est ainsi reconnue comme un objet jQuery sur lequel s'applique la fonction .show() : jQuery affichera tous les « clouds » qui ont pour classe le champ sélectionné par l'utilisateur. Au milieu de ce code s'insère par ailleurs une ligne afin de systématiquement tout cacher, afin de n'afficher que les « clouds » recherchés.\r\n\r\n3) Un dernier point important porte sur la façon de nommer ces champs. Puisque ces champs sont transformés en classes, il est important qu'ils ne comprennent pas d'espace. Mieux vaut donc préférer « field1 », « field-1 » ou encore « field_1 » par exemple à « field 1 » qui ne fonctionnera pas.\r\n\r\n\r\n## FINALISER SON APPLICATION\r\n\r\nNous ne nous attarderons pas là-dessus ici mais il ne faut pas oublier d'habiller un peu son application en travaillant sur le fichier CSS de la même manière que pour un site web.\r\n\r\n![Aperçu cloudAtlas](http://tibomahe.com/storage/aper%C3%A7u_cloudatlas.png)\r\n_Woooo ca pique les yeux !_\r\n\r\nPar ailleurs, dès les premières lignes, la documentation de Meteor nous apprend que par défaut une application Meteor comprend un package « autopublish » et un package « insecure » qui permettent à n'importe quel utilisateur de respectivement lire tout ce qui se trouve sur la base de donnée et écrire ce qu'il veut sur celle-ci. La première n'est pas très dangereuse pour nous, chaque cloud a de toute façon vocation a être publique. Cependant la deuxième peut-être plus dangereuse et nécessite qu'on la retire pour la production, par une simple commande dans le Terminal, une nouvelle fois :\r\n\r\nmeteor remove insecure\r\n\r\nEnfin il ne nous reste plus qu'à lancer l'application pour ses premiers tests en dehors du localhost et afin qu'elle vienne à la rencontre de son public. Là encore Meteor nous simplifie vraiment la vie en proposant pour chaque application un service d'hébergement gratuit avec la simple commande de Terminal :\r\n\r\nmeteor deploy CeQueJeVeux.meteor.com\r\n\r\nNotre application est ainsi désormais disponible en ligne avec le sous-domaine de notre choix. \r\n\r\nIl est par ailleurs possible d'héberger l'application avec notre propre domaine :\r\n\r\nmeteor deploy www.monsite.com\r\n\r\nOu encore de le télécharger sous forme d'archive pour l'insérer sur son propre site :\r\n\r\nmeteor bundle cloudAtlas.tgz\r\n\r\nDans ce dernier cas il est important de noter que Meteor dépend de Node.js et de MongoDb. L'application fonctionnera donc uniquement sur un serveur supportant ces deux technologies.\r\n\r\n\r\nBien sûr il reste tant de choses à dire sur Meteor ! Nous n'avons pu ici qu'effleurer ses potentialités alors que le framework n'en est actuellement qu'à sa version d'essai. Il n'en demeure pas point que Meteor se présente déjà comme un outil indispensable pour les applications de demain.\r\n\r\n\r\n@tibomahe\r\ntibomahe.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}